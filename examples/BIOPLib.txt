// BIOP Functions Library
// Gets the name of the parameter window
// You need to define toolName in your macro
function getWinTitle() {
 	name = toolName();
 	return name+" Parameters";
 }

// Getter for generic access to data in an opened parameter window
// key is a string. no ':' allowed
function getData(key) {

	// openParamsIfNeeded makes sure that the log table is open when getData is called.
	openParamsIfNeeded();

	// Get the parameters window
	winTitle = getWinTitle();
	win = "["+winTitle+"]";
	
	selectWindow(winTitle);

	// Get all the lines in the log window
	lines = split(getInfo(),'\n');


	// Iterate through each line till you find the key
	i=0;
	done=false;
	value = "";
	while (!done && i < lines.length) {
		// If we find the string
		if(matches(lines[i], ".*"+key+".*")) {
			// Extract the value by grabbing everything right og the ' : ' sequence
			// p. ex: foo : Jeremiah is in the parameter log window
			// getGata("foo"); will return "Jeremiah"
			value = substring(lines[i], indexOf(lines[i]," : ")+3,lengthOf(lines[i]));
			
			// Setting the done variable here lets us stop looking through the lines needlessly.
			done = true;
			
		} else {
			// If we did not find the key, go to the next line and try again
			i++;
		}	
	}

	return value;
	
	// Note: In this loop, if the key is not found, it returns an empty string.
}

// Setter for generic access to data in an opened parameter window
// Key is the unique name of the data and value is the data's
// Contents.
function setData(key, value) {
	
	// openParamsIfNeeded makes sure that the log table is open when setData is called.
	openParamsIfNeeded();
	winTitle = getWinTitle();
	win = "["+winTitle+"]";
	
	selectWindow(winTitle);

	// First let's check if the key already exists
	// Logic here is similar to the getData() function above 
	lines = split(getInfo(),'\n');
	i=0;
	done=false;
	if (lines.length > 0) {
		while (!done && i < lines.length) {
			if(matches(lines[i], ".*"+key+".*")) {
				done=true;
			} else {
				i++;
			}		
		}
			// If we found the key already, it's at index i and we need to 
			// use \\Update to modify that line of the log table
			// And have it write 'key : value'
			print(win, "\\Update"+i+":"+key+" : "+value);
	} else { 
		// The key did not exist, a call to print is enough to make a new line
		// with 'key : value'
		print(win, key+" : "+value);
	}
}

// Like getData, but takes a default argument
// and returns it if the key is not found
function getDataD(key, default) {
	value = getData(key);
	if (value == "") {
		return default;
	} else {
		return value;
	}
}

// Function to make sure the parameters window
// is active
function openParamsIfNeeded() {
	winTitle = getWinTitle();
	t = "["+winTitle+"]";
	// If something is already open, keep it as-is. Otherwise make a new window.
	if(!isOpen(winTitle)) {
		run("New... ", "name="+t+" type=Table");
		print(t, "\\Update0:This window contains data the macro needs. Please don't close it");
	}
}

// Allows for loading a parameters file
function loadParameters() {
	// Get the file
	file = File.openDialog("Select Parameters File");
	
	//Get the contents
	filestr = File.openAsString(file);
	lines = split(filestr, "\n");
	
	//Open the file and parse the data
	settingName = getWinTitle();;
	
	t = "["+settingName+"]";
	
	// If something is already open, keep it as-is.
	if(!isOpen(settingName)) {
		run("New... ", "name="+t+" type=Table");
	}
	selectWindow(settingName);
	for (i=0; i<lines.length; i++) {
		print(t, "\\Update"+i+":"+lines[i]);
	}
}

// Saves the current parameters file.
function saveParameters() {
	winName = getWinTitle();
	selectWindow(winName);
	saveAs("Text", "");
}



